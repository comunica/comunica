import {
  addDurationToDateTime,
  Aggregate,
  BlankNode,
  bool,
  BooleanLiteral,
  Builder,
  CastError,
  CoalesceError,
  DateLiteral,
  dateTime,
  DateTimeLiteral,
  DayTimeDurationLiteral,
  dayTimeDurationsToSeconds,
  decimal,
  DecimalLiteral,
  declare,
  defaultedDateTimeRepresentation,
  defaultedDayTimeDurationRepresentation,
  defaultedDurationRepresentation,
  defaultedYearMonthDurationRepresentation,
  DefaultGraph,
  double,
  DoubleLiteral,
  DurationLiteral,
  elapsedDuration,
  EmptyAggregateError,
  Existence,
  ExpressionError,
  expressionToVar,
  ExpressionType,
  ExtensionFunctionError,
  extractRawTimeZone,
  float,
  FloatLiteral,
  IncompatibleLanguageOperation,
  InError,
  integer,
  IntegerLiteral,
  InvalidArgumentTypes,
  InvalidArity,
  InvalidLexicalForm,
  InvalidTimezoneCall,
  isExpressionError,
  isNonLexicalLiteral,
  isSubTypeOf,
  langString,
  LangStringLiteral,
  Literal,
  NamedNode,
  negateDuration,
  NoAggregator,
  NonLexicalLiteral,
  NumericLiteral,
  Operator,
  OverloadTree,
  parseDate,
  parseDateTime,
  parseDayTimeDuration,
  parseDuration,
  parseTime,
  parseXSDDecimal,
  parseXSDFloat,
  parseXSDInteger,
  parseYearMonthDuration,
  prepareEvaluatorActionContext,
  Quad,
  RDFEqualTypeError,
  SparqlOperator,
  SparqlOperators,
  string,
  StringLiteral,
  Term,
  TermTransformer,
  TimeLiteral,
  toDateTimeRepresentation,
  toUTCDate,
  trimToDayTimeDuration,
  trimToYearMonthDuration,
  TypeAlias,
  typedLiteral,
  TypeURL,
  UnboundVariableError,
  UnknownOperator,
  Variable,
  YearMonthDurationLiteral,
  yearMonthDurationsToMonths,
} from '../../lib';

describe('index', () => {
  it('exports all expected members', () => {
    const members = [
      TermTransformer,
      OverloadTree,
      prepareEvaluatorActionContext,
      declare,
      bool,
      string,
      double,
      integer,
      dateTime,
      langString,
      decimal,
      float,
      expressionToVar,
      Builder,
      ExpressionError,
      isExpressionError,
      EmptyAggregateError,
      RDFEqualTypeError,
      IncompatibleLanguageOperation,
      InvalidTimezoneCall,
      InvalidArgumentTypes,
      CoalesceError,
      InError,
      NoAggregator,
      UnboundVariableError,
      CastError,
      ExtensionFunctionError,
      InvalidLexicalForm,
      InvalidArity,
      UnknownOperator,
      typedLiteral,
      TypeURL,
      TypeAlias,
      SparqlOperator,
      SparqlOperators,
      isSubTypeOf,
      dayTimeDurationsToSeconds,
      defaultedDateTimeRepresentation,
      defaultedDayTimeDurationRepresentation,
      defaultedDurationRepresentation,
      defaultedYearMonthDurationRepresentation,
      extractRawTimeZone,
      negateDuration,
      toDateTimeRepresentation,
      toUTCDate,
      yearMonthDurationsToMonths,
      DateTimeLiteral,
      DayTimeDurationLiteral,
      DateLiteral,
      DurationLiteral,
      TimeLiteral,
      LangStringLiteral,
      Term,
      YearMonthDurationLiteral,
      Quad,
      Operator,
      NamedNode,
      Variable,
      NumericLiteral,
      BooleanLiteral,
      BlankNode,
      DecimalLiteral,
      DefaultGraph,
      DoubleLiteral,
      Aggregate,
      Existence,
      ExpressionType,
      Literal,
      IntegerLiteral,
      FloatLiteral,
      NonLexicalLiteral,
      StringLiteral,
      isNonLexicalLiteral,
      addDurationToDateTime,
      elapsedDuration,
      parseDateTime,
      parseDayTimeDuration,
      parseDuration,
      parseTime,
      parseYearMonthDuration,
      parseXSDDecimal,
      parseXSDFloat,
      parseXSDInteger,
      parseDate,
      trimToYearMonthDuration,
      trimToDayTimeDuration,
    ];
    for (const member of members) {
      expect(member).toBeDefined();
    }
  });
});
