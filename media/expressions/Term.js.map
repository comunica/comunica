{"version":3,"file":"Term.js","sourceRoot":"","sources":["Term.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { TermTransformer } from '../transformers/TermTransformer';\nimport * as C from '../util/Consts';\nimport { TypeAlias, TypeURL } from '../util/Consts';\n\nimport type {\n  IDateRepresentation,\n  IDateTimeRepresentation,\n  IDurationRepresentation,\n  ITimeRepresentation,\n  IYearMonthDurationRepresentation,\n} from '../util/DateTimeHelpers';\nimport * as Err from '../util/Errors';\nimport { serializeDateTime, serializeDuration, serializeTime, serializeDate } from '../util/Serialization';\nimport type { ISuperTypeProvider } from '../util/TypeHandling';\nimport { isSubTypeOf } from '../util/TypeHandling';\nimport type { TermExpression, TermType } from './Expressions';\nimport { ExpressionType } from './Expressions';\n\nconst DF = new DataFactory();\n\nexport abstract class Term implements TermExpression {\n  public expressionType: ExpressionType.Term = ExpressionType.Term;\n  public abstract termType: TermType;\n\n  public abstract toRDF(): RDF.Term;\n\n  public str(): string {\n    throw new Err.InvalidArgumentTypes([ this ], C.RegularOperator.STR);\n  }\n\n  public coerceEBV(): boolean {\n    throw new Err.EBVCoercionError(this);\n  }\n}\n\n// NamedNodes -----------------------------------------------------------------\nexport class NamedNode extends Term {\n  public termType: TermType = 'namedNode';\n  public constructor(public value: string) {\n    super();\n  }\n\n  public toRDF(): RDF.Term {\n    return DF.namedNode(this.value);\n  }\n\n  public override str(): string {\n    return this.value;\n  }\n}\n\n// BlankNodes -----------------------------------------------------------------\n\nexport class BlankNode extends Term {\n  public value: RDF.BlankNode;\n  public termType: TermType = 'blankNode';\n\n  public constructor(value: RDF.BlankNode | string) {\n    super();\n    this.value = typeof value === 'string' ? DF.blankNode(value) : value;\n  }\n\n  public toRDF(): RDF.Term {\n    return this.value;\n  }\n}\n\n// Quads -----------------------------------------------------------------\nexport class Quad extends Term {\n  public termType: TermType = 'quad';\n  private readonly transformer: TermTransformer;\n  private readonly valueTerm: RDF.BaseQuad;\n\n  public constructor(input: RDF.BaseQuad, superTypeProvider: ISuperTypeProvider) {\n    super();\n    this.transformer = new TermTransformer(superTypeProvider);\n    this.valueTerm = input;\n  }\n\n  public toRDF(): RDF.BaseQuad {\n    return this.valueTerm;\n  }\n\n  public get subject(): Term {\n    return this.transformer.transformRDFTermUnsafe(this.RDFsubject);\n  }\n\n  public get predicate(): Term {\n    return this.transformer.transformRDFTermUnsafe(this.RDFpredicate);\n  }\n\n  public get object(): Term {\n    return this.transformer.transformRDFTermUnsafe(this.RDFobject);\n  }\n\n  public get RDFsubject(): RDF.Term {\n    return this.toRDF().subject;\n  }\n\n  public get RDFpredicate(): RDF.Term {\n    return this.toRDF().predicate;\n  }\n\n  public get RDFobject(): RDF.Term {\n    return this.toRDF().object;\n  }\n}\n\n// Literals-- -----------------------------------------------------------------\nexport function isLiteralTermExpression(expr: TermExpression): Literal<any> | undefined {\n  if (expr.termType === 'literal') {\n    return <Literal<any>> expr;\n  }\n  return undefined;\n}\n\nexport interface ISerializable {\n  toString: () => string;\n}\n\nexport class Literal<T extends ISerializable> extends Term {\n  public termType = <const> 'literal';\n  /**\n   * @param typedValue internal representation of this literal's value\n   * @param dataType a string representing the datatype. Can be of type @see LiteralTypes or any URI\n   * @param strValue the string value of this literal. In other words, the string representing the RDF.literal value.\n   * @param language the language, mainly for language enabled strings like RDF_LANG_STRING\n   */\n  public constructor(\n    public typedValue: T,\n    public dataType: string,\n    public strValue?: string,\n    public language?: string,\n  ) {\n    super();\n  }\n\n  public toRDF(): RDF.Literal {\n    return DF.literal(\n      this.strValue ?? this.str(),\n      this.language ?? DF.namedNode(this.dataType),\n    );\n  }\n\n  public override str(): string {\n    return this.strValue ?? this.typedValue.toString();\n  }\n}\n\nexport abstract class NumericLiteral extends Literal<number> {\n  protected constructor(\n    public override typedValue: number,\n    dataType: string,\n    public override strValue?: string,\n    public override language?: string,\n  ) {\n    super(typedValue, dataType, strValue, language);\n  }\n\n  protected abstract specificFormatter(val: number): string;\n\n  public override coerceEBV(): boolean {\n    return Boolean(this.typedValue);\n  }\n\n  public override toRDF(): RDF.Literal {\n    const term = super.toRDF();\n    if (!Number.isFinite(this.typedValue)) {\n      term.value = term.value.replace('Infinity', 'INF');\n    }\n    return term;\n  }\n\n  public override str(): string {\n    return this.strValue ??\n      this.specificFormatter(this.typedValue);\n  }\n}\n\nexport class IntegerLiteral extends NumericLiteral {\n  public constructor(\n    public override typedValue: number,\n    dataType?: string,\n    public override strValue?: string,\n    public override language?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_INTEGER, strValue, language);\n  }\n\n  protected specificFormatter(val: number): string {\n    return val.toFixed(0);\n  }\n}\n\nexport class DecimalLiteral extends NumericLiteral {\n  public constructor(\n    public override typedValue: number,\n    dataType?: string,\n    public override strValue?: string,\n    public override language?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_DECIMAL, strValue, language);\n  }\n\n  protected specificFormatter(val: number): string {\n    return val.toString();\n  }\n}\n\nexport class FloatLiteral extends NumericLiteral {\n  public constructor(\n    public override typedValue: number,\n    dataType?: string,\n    public override strValue?: string,\n    public override language?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_FLOAT, strValue, language);\n  }\n\n  protected specificFormatter(val: number): string {\n    return val.toString();\n  }\n}\n\nexport class DoubleLiteral extends NumericLiteral {\n  public constructor(\n    public override typedValue: number,\n    dataType?: string,\n    public override strValue?: string,\n    public override language?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_DOUBLE, strValue, language);\n  }\n\n  protected specificFormatter(val: number): string {\n    if (!Number.isFinite(val)) {\n      if (val > 0) {\n        return 'INF';\n      }\n      if (val < 0) {\n        return '-INF';\n      }\n      return 'NaN';\n    }\n\n    const jsExponential = val.toExponential();\n    const [ jsMantisse, jsExponent ] = jsExponential.split('e');\n\n    // Leading + must be removed for integer\n    // https://www.w3.org/TR/xmlschema-2/#integer\n    const exponent = jsExponent.replace(/\\+/u, '');\n\n    // SPARQL test suite prefers trailing zero's\n    const mantisse = jsMantisse.includes('.') ?\n      jsMantisse :\n      `${jsMantisse}.0`;\n\n    return `${mantisse}E${exponent}`;\n  }\n}\n\nexport class BooleanLiteral extends Literal<boolean> {\n  public constructor(public override typedValue: boolean, public override strValue?: string, dataType?: string) {\n    super(typedValue, dataType ?? TypeURL.XSD_BOOLEAN, strValue);\n  }\n\n  public override coerceEBV(): boolean {\n    return this.typedValue;\n  }\n}\n\nexport class LangStringLiteral extends Literal<string> {\n  public constructor(public override typedValue: string, public override language: string, dataType?: string) {\n    super(typedValue, dataType ?? TypeURL.RDF_LANG_STRING, typedValue, language);\n  }\n\n  public override coerceEBV(): boolean {\n    return this.str().length > 0;\n  }\n}\n\n// https://www.w3.org/TR/2004/REC-rdf-concepts-20040210/#dfn-plain-literal\n// https://www.w3.org/TR/sparql11-query/#defn_SimpleLiteral\n// https://www.w3.org/TR/sparql11-query/#func-strings\n// This does not include language tagged literals\nexport class StringLiteral extends Literal<string> {\n  /**\n   * @param typedValue\n   * @param dataType Should be type that implements XSD_STRING\n   */\n  public constructor(public override typedValue: string, dataType?: string) {\n    super(typedValue, dataType ?? TypeURL.XSD_STRING, typedValue);\n  }\n\n  public override coerceEBV(): boolean {\n    return this.str().length > 0;\n  }\n}\n\nexport class DateTimeLiteral extends Literal<IDateTimeRepresentation> {\n  public constructor(\n    public override typedValue: IDateTimeRepresentation,\n    public override strValue?: string,\n    dataType?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_DATE_TIME, strValue);\n  }\n\n  public override str(): string {\n    return serializeDateTime(this.typedValue);\n  }\n}\n\nexport class TimeLiteral extends Literal<ITimeRepresentation> {\n  public constructor(\n    public override typedValue: ITimeRepresentation,\n    public override strValue?: string,\n    dataType?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_TIME, strValue);\n  }\n\n  public override str(): string {\n    return serializeTime(this.typedValue);\n  }\n}\n\nexport class DateLiteral extends Literal<IDateRepresentation> {\n  public constructor(\n    public override typedValue: IDateRepresentation,\n    public override strValue?: string,\n    dataType?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_DATE, strValue);\n  }\n\n  public override str(): string {\n    return serializeDate(this.typedValue);\n  }\n}\n\nexport class DurationLiteral extends Literal<Partial<IDurationRepresentation>> {\n  public constructor(\n    public override typedValue: Partial<IDurationRepresentation>,\n    public override strValue?: string,\n    dataType?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_DURATION, strValue);\n  }\n\n  public override str(): string {\n    return serializeDuration(this.typedValue);\n  }\n}\n\nexport class DayTimeDurationLiteral extends DurationLiteral {\n  public constructor(\n    public override typedValue: Partial<IDurationRepresentation>,\n    public override strValue?: string,\n    dataType?: string,\n  ) {\n    super(typedValue, strValue, dataType ?? TypeURL.XSD_DAY_TIME_DURATION);\n  }\n}\n\nexport class YearMonthDurationLiteral extends Literal<Partial<IYearMonthDurationRepresentation>> {\n  public constructor(\n    public override typedValue: Partial<IYearMonthDurationRepresentation>,\n    public override strValue?: string,\n    dataType?: string,\n  ) {\n    super(typedValue, dataType ?? TypeURL.XSD_YEAR_MONTH_DURATION, strValue);\n  }\n\n  public override str(): string {\n    return serializeDuration(this.typedValue, 'P0M');\n  }\n}\n\n/**\n * This class is used when a literal is parsed, and it's value is\n * an invalid lexical form for it's datatype. The spec defines value with\n * invalid lexical form are still valid terms, and as such we can not error\n * immediately. This class makes sure that the typedValue will remain undefined,\n * and the category 'nonlexical'. This way, only when operators apply to the\n * 'nonlexical' category, they will keep working, otherwise they will throw a\n * type error.\n * This seems to match the spec, except maybe for functions that accept\n * non-lexical values for their datatype.\n *\n * See:\n *  - https://www.w3.org/TR/xquery/#dt-type-error\n *  - https://www.w3.org/TR/rdf-concepts/#section-Literal-Value\n *  - https://www.w3.org/TR/xquery/#dt-ebv\n *  - ... some other more precise thing i can't find...\n */\nexport class NonLexicalLiteral extends Literal<{ toString: () => 'undefined' }> {\n  public constructor(\n    typedValue: undefined,\n    dataType: string,\n    private readonly openWorldType: ISuperTypeProvider,\n    strValue?: string,\n    language?: string,\n  ) {\n    super({ toString: () => 'undefined' }, dataType, strValue, language);\n  }\n\n  public override coerceEBV(): boolean {\n    const isNumericOrBool =\n      isSubTypeOf(this.dataType, TypeURL.XSD_BOOLEAN, this.openWorldType) ||\n      isSubTypeOf(this.dataType, TypeAlias.SPARQL_NUMERIC, this.openWorldType);\n    if (isNumericOrBool) {\n      return false;\n    }\n    throw new Err.EBVCoercionError(this);\n  }\n\n  public override toRDF(): RDF.Literal {\n    return DF.literal(\n      this.str(),\n      this.language ?? DF.namedNode(this.dataType),\n    );\n  }\n\n  public override str(): string {\n    return this.strValue ?? '';\n  }\n}\n\nexport function isNonLexicalLiteral(lit: Literal<any>): NonLexicalLiteral | undefined {\n  if (lit instanceof NonLexicalLiteral) {\n    return lit;\n  }\n  return undefined;\n}\n"]}