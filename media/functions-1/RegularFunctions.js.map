{"version":3,"file":"RegularFunctions.js","sourceRoot":"","sources":["RegularFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { BigNumber } from 'bignumber.js';\nimport { sha1, sha256, sha384, sha512 } from 'hash.js';\nimport { DataFactory } from 'rdf-data-factory';\nimport { resolve as resolveRelativeIri } from 'relative-to-absolute-iri';\nimport { hash as md5 } from 'spark-md5';\nimport * as uuid from 'uuid';\n\nimport type { ICompleteSharedContext } from '../evaluators/evaluatorHelpers/BaseExpressionEvaluator';\nimport * as E from '../expressions';\nimport type { Quad } from '../expressions';\nimport { TermTransformer } from '../transformers/TermTransformer';\nimport * as C from '../util/Consts';\nimport { RegularOperator, TypeAlias, TypeURL } from '../util/Consts';\nimport type { IDayTimeDurationRepresentation } from '../util/DateTimeHelpers';\nimport {\n  dayTimeDurationsToSeconds,\n  defaultedDateTimeRepresentation,\n  defaultedDayTimeDurationRepresentation,\n  defaultedDurationRepresentation,\n  defaultedYearMonthDurationRepresentation,\n  extractRawTimeZone,\n  negateDuration,\n  toDateTimeRepresentation,\n  toUTCDate,\n  yearMonthDurationsToMonths,\n} from '../util/DateTimeHelpers';\nimport * as Err from '../util/Errors';\nimport { orderTypes } from '../util/Ordering';\nimport { addDurationToDateTime, elapsedDuration } from '../util/SpecAlgos';\nimport type { IOverloadedDefinition } from './Core';\nimport { RegularFunction } from './Core';\nimport { bool, decimal, declare, double, integer, langString, string } from './Helpers';\nimport * as X from './XPathFunctions';\nimport { regularFunctions } from '.';\n\nconst DF = new DataFactory<RDF.BaseQuad>();\n\ntype Term = E.TermExpression;\n\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Begin definitions\n\n// ----------------------------------------------------------------------------\n// Operator Mapping\n// https://www.w3.org/TR/sparql11-query/#OperatorMapping\n// ----------------------------------------------------------------------------\n\nconst not = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.NOT)\n    .onTerm1(() => val => bool(!val.coerceEBV()))\n    .collect(),\n};\n\nconst unaryPlus = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.UPLUS)\n    .numericConverter(() => val => val)\n    .collect(),\n};\n\nconst unaryMinus = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.UMINUS)\n    .numericConverter(() => val => -val)\n    .collect(),\n};\n\nconst multiplication = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.MULTIPLICATION)\n    .arithmetic(() => (left, right) => new BigNumber(left).times(right).toNumber())\n    .collect(),\n};\n\nconst division = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.DIVISION)\n    .arithmetic(() => (left, right) => new BigNumber(left).div(right).toNumber())\n    .onBinaryTyped(\n      [ TypeURL.XSD_INTEGER, TypeURL.XSD_INTEGER ],\n      () => (left: number, right: number) => {\n        if (right === 0) {\n          throw new Err.ExpressionError('Integer division by 0');\n        }\n        return decimal(new BigNumber(left).div(right).toNumber());\n      },\n    )\n    .collect(),\n};\n\nconst addition = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.ADDITION)\n    .arithmetic(() => (left, right) => new BigNumber(left).plus(right).toNumber())\n    .set([ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DAY_TIME_DURATION ], () =>\n      ([ date, dur ]: [ E.DateTimeLiteral, E.DayTimeDurationLiteral ]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-dateTime\n        new E.DateTimeLiteral(addDurationToDateTime(date.typedValue, defaultedDurationRepresentation(dur.typedValue))))\n    .copy({\n      from: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DAY_TIME_DURATION ],\n      to: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_YEAR_MONTH_DURATION ],\n    })\n    .set([ TypeURL.XSD_DATE, TypeURL.XSD_DAY_TIME_DURATION ], () =>\n      ([ date, dur ]: [E.DateLiteral, E.DurationLiteral]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-date\n        new E.DateLiteral(\n          addDurationToDateTime(\n            defaultedDateTimeRepresentation(date.typedValue),\n            defaultedDurationRepresentation(dur.typedValue),\n          ),\n        ))\n    .copy({\n      from: [ TypeURL.XSD_DATE, TypeURL.XSD_DAY_TIME_DURATION ],\n      to: [ TypeURL.XSD_DATE, TypeURL.XSD_YEAR_MONTH_DURATION ],\n    })\n    .set([ TypeURL.XSD_TIME, TypeURL.XSD_DAY_TIME_DURATION ], () =>\n      ([ time, dur ]: [E.TimeLiteral, E.DurationLiteral]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-time\n        new E.TimeLiteral(\n          addDurationToDateTime(\n            defaultedDateTimeRepresentation(time.typedValue),\n            defaultedDurationRepresentation(dur.typedValue),\n          ),\n        ))\n    .copy({\n      from: [ TypeURL.XSD_TIME, TypeURL.XSD_DAY_TIME_DURATION ],\n      to: [ TypeURL.XSD_TIME, TypeURL.XSD_YEAR_MONTH_DURATION ],\n    })\n    .collect(),\n};\n\nconst subtraction = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.SUBTRACTION)\n    .arithmetic(() => (left, right) => new BigNumber(left).minus(right).toNumber())\n    .set([ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DATE_TIME ], ({ defaultTimeZone }) =>\n      ([ date1, date2 ]: [ E.DateTimeLiteral, E.DateTimeLiteral ]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-subtract-dateTimes;\n        new E.DayTimeDurationLiteral(elapsedDuration(date1.typedValue, date2.typedValue, defaultTimeZone)))\n    .copy({ from: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_DATE, TypeURL.XSD_DATE ]})\n    .copy({ from: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_TIME, TypeURL.XSD_TIME ]})\n    .set([ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DAY_TIME_DURATION ], () =>\n      ([ date, dur ]: [ E.DateTimeLiteral, E.DayTimeDurationLiteral ]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-dateTime\n        new E.DateTimeLiteral(addDurationToDateTime(\n          date.typedValue,\n          defaultedDurationRepresentation(negateDuration(dur.typedValue)),\n        )))\n    .copy({\n      from: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DAY_TIME_DURATION ],\n      to: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_YEAR_MONTH_DURATION ],\n    })\n    .set([ TypeURL.XSD_DATE, TypeURL.XSD_DAY_TIME_DURATION ], () =>\n      ([ date, dur ]: [ E.DateLiteral, E.DayTimeDurationLiteral ]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-date\n        new E.DateLiteral(addDurationToDateTime(\n          defaultedDateTimeRepresentation(date.typedValue),\n          defaultedDurationRepresentation(negateDuration(dur.typedValue)),\n        )))\n    .copy({\n      from: [ TypeURL.XSD_DATE, TypeURL.XSD_DAY_TIME_DURATION ],\n      to: [ TypeURL.XSD_DATE, TypeURL.XSD_YEAR_MONTH_DURATION ],\n    })\n    .set([ TypeURL.XSD_TIME, TypeURL.XSD_DAY_TIME_DURATION ], () =>\n      ([ time, dur ]: [ E.TimeLiteral, E.DayTimeDurationLiteral ]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-date\n        new E.TimeLiteral(addDurationToDateTime(\n          defaultedDateTimeRepresentation(time.typedValue),\n          defaultedDurationRepresentation(negateDuration(dur.typedValue)),\n        )))\n    .collect(),\n};\n\n// https://www.w3.org/TR/sparql11-query/#func-RDFterm-equal\nconst equality = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.EQUAL)\n    .numberTest(() => (left, right) => left === right)\n    .stringTest(() => (left, right) => left.localeCompare(right) === 0)\n    .set(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => ([ left, right ]: E.LangStringLiteral[]) => bool(left.str() === right.str() &&\n        left.language === right.language),\n    )\n    // Fall through: a TypeURL.XSD_STRING is never equal to a TypeURL.RDF_LANG_STRING.\n    .set([ TypeAlias.SPARQL_STRINGLY, TypeAlias.SPARQL_STRINGLY ], () => () => bool(false))\n    .booleanTest(() => (left, right) => left === right)\n    .dateTimeTest(({ defaultTimeZone }) => (left, right) =>\n      toUTCDate(left, defaultTimeZone).getTime() === toUTCDate(right, defaultTimeZone).getTime())\n    .copy({\n      // https://www.w3.org/TR/xpath-functions/#func-date-equal\n      from: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DATE_TIME ],\n      to: [ TypeURL.XSD_DATE, TypeURL.XSD_DATE ],\n    })\n    .set(\n      [ 'quad', 'quad' ],\n      context => ([ left, right ]) => {\n        const op: RegularFunction = new RegularFunction(RegularOperator.EQUAL, equality);\n        return bool(\n          (<E.BooleanLiteral> op.apply([ (<Quad> left).subject, (<Quad> right).subject ], context)).coerceEBV() &&\n          (<E.BooleanLiteral> op.apply([ (<Quad> left).predicate, (<Quad> right).predicate ], context)).coerceEBV() &&\n          (<E.BooleanLiteral> op.apply([ (<Quad> left).object, (<Quad> right).object ], context)).coerceEBV(),\n        );\n      },\n      false,\n    )\n    .set(\n      [ 'term', 'term' ],\n      () => ([ left, right ]) => bool(RDFTermEqual(left, right)),\n      false,\n    )\n    .set([ TypeURL.XSD_DURATION, TypeURL.XSD_DURATION ], () =>\n      ([ dur1, dur2 ]: [ E.DurationLiteral, E.DurationLiteral ]) =>\n        bool(yearMonthDurationsToMonths(defaultedYearMonthDurationRepresentation(dur1.typedValue)) ===\n          yearMonthDurationsToMonths(defaultedYearMonthDurationRepresentation(dur2.typedValue)) &&\n          dayTimeDurationsToSeconds(defaultedDayTimeDurationRepresentation(dur1.typedValue)) ===\n          dayTimeDurationsToSeconds(defaultedDayTimeDurationRepresentation(dur2.typedValue))))\n    .set([ TypeURL.XSD_TIME, TypeURL.XSD_TIME ], ({ defaultTimeZone }) =>\n      ([ time1, time2 ]: [E.TimeLiteral, E.TimeLiteral]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-time-equal\n        bool(toUTCDate(defaultedDateTimeRepresentation(time1.typedValue), defaultTimeZone).getTime() ===\n          toUTCDate(defaultedDateTimeRepresentation(time2.typedValue), defaultTimeZone).getTime()))\n    .collect(),\n};\n\nfunction RDFTermEqual(_left: Term, _right: Term): boolean {\n  const left = _left.toRDF();\n  const right = _right.toRDF();\n  const val = left.equals(right);\n  if (!val && (left.termType === 'Literal') && (right.termType === 'Literal')) {\n    throw new Err.RDFEqualTypeError([ _left, _right ]);\n  }\n  return val;\n}\n\nconst inequality = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.NOT_EQUAL)\n    .set([ 'term', 'term' ], context =>\n      ([ first, second ]) =>\n        bool(!(<E.BooleanLiteral> regularFunctions[C.RegularOperator.EQUAL]\n          .apply([ first, second ], context)).typedValue))\n    .collect(),\n};\n\nconst lesserThan = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.LT)\n    .numberTest(() => (left, right) => left < right)\n    .stringTest(() => (left, right) => left.localeCompare(right) === -1)\n    .booleanTest(() => (left, right) => left < right)\n    .set(\n      [ 'quad', 'quad' ],\n      () => ([ left, right ]) => bool(orderTypes(left.toRDF(), right.toRDF(), true) === -1),\n      false,\n    )\n    .dateTimeTest(({ defaultTimeZone }) => (left, right) =>\n      toUTCDate(left, defaultTimeZone).getTime() < toUTCDate(right, defaultTimeZone).getTime())\n    .copy({\n      // https://www.w3.org/TR/xpath-functions/#func-date-less-than\n      from: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DATE_TIME ],\n      to: [ TypeURL.XSD_DATE, TypeURL.XSD_DATE ],\n    })\n    .set([ TypeURL.XSD_YEAR_MONTH_DURATION, TypeURL.XSD_YEAR_MONTH_DURATION ], () =>\n      ([ dur1L, dur2L ]: [E.YearMonthDurationLiteral, E.YearMonthDurationLiteral]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-yearMonthDuration-less-than\n        bool(yearMonthDurationsToMonths(defaultedYearMonthDurationRepresentation(dur1L.typedValue)) <\n          yearMonthDurationsToMonths(defaultedYearMonthDurationRepresentation(dur2L.typedValue))))\n    .set([ TypeURL.XSD_DAY_TIME_DURATION, TypeURL.XSD_DAY_TIME_DURATION ], () =>\n      ([ dur1, dur2 ]: [E.DayTimeDurationLiteral, E.DayTimeDurationLiteral]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-dayTimeDuration-greater-than\n        bool(dayTimeDurationsToSeconds(defaultedDayTimeDurationRepresentation(dur1.typedValue)) <\n          dayTimeDurationsToSeconds(defaultedDayTimeDurationRepresentation(dur2.typedValue))))\n    .set([ TypeURL.XSD_TIME, TypeURL.XSD_TIME ], ({ defaultTimeZone }) =>\n      ([ time1, time2 ]: [E.TimeLiteral, E.TimeLiteral]) =>\n        // https://www.w3.org/TR/xpath-functions/#func-time-less-than\n        bool(toUTCDate(defaultedDateTimeRepresentation(time1.typedValue), defaultTimeZone).getTime() <\n          toUTCDate(defaultedDateTimeRepresentation(time2.typedValue), defaultTimeZone).getTime()))\n    .collect(),\n};\n\nconst greaterThan = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.GT)\n    .set([ 'term', 'term' ], context =>\n      ([ first, second ]) =>\n        // X < Y -> Y > X\n        regularFunctions[C.RegularOperator.LT].apply([ second, first ], context))\n    .collect(),\n};\n\nconst lesserThanEqual = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.LTE)\n    .set([ 'term', 'term' ], context =>\n      ([ first, second ]) =>\n        // X <= Y -> X < Y || X = Y\n        // First check if the first is lesser than the second, then check if they are equal.\n        // Doing this, the correct error will be thrown, each type that has a lesserThanEqual has a matching lesserThan.\n        bool(\n          (<E.BooleanLiteral> regularFunctions[C.RegularOperator.LT].apply([ first, second ], context)).typedValue ||\n          (<E.BooleanLiteral> regularFunctions[C.RegularOperator.EQUAL].apply([ first, second ], context)).typedValue,\n        ))\n    .collect(),\n};\n\nconst greaterThanEqual = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.GTE)\n    .set([ 'term', 'term' ], context =>\n      ([ first, second ]) =>\n        // X >= Y -> Y <= X\n        regularFunctions[C.RegularOperator.LTE].apply([ second, first ], context))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on RDF Terms\n// https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isIRI\n */\nconst isIRI = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_IRI)\n    .onTerm1(() => term => bool(term.termType === 'namedNode'))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isBlank\n */\nconst isBlank = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_BLANK)\n    .onTerm1(() => term => bool(term.termType === 'blankNode'))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isLiteral\n */\nconst isLiteral = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_LITERAL)\n    .onTerm1(() => term => bool(term.termType === 'literal'))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isNumeric\n */\nconst isNumeric = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_NUMERIC)\n    .onNumeric1(() => () => bool(true))\n    .onTerm1(() => () => bool(false))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-str\n */\nconst STR = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.STR)\n    .onTerm1(() => term => string(term.str()))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-lang\n */\nconst lang = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.LANG)\n    .onLiteral1(() => lit => string(lit.language ?? ''))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-datatype\n */\nconst datatype = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.DATATYPE)\n    .onLiteral1(() => lit => new E.NamedNode(lit.dataType))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-iri\n */\nconst IRI = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IRI)\n    .set([ 'namedNode' ], context => (args) => {\n      const lit = <E.NamedNode> args[0];\n      const iri = resolveRelativeIri(lit.str(), context.baseIRI ?? '');\n      return new E.NamedNode(iri);\n    })\n    .onString1(context => (lit) => {\n      const iri = resolveRelativeIri(lit.str(), context.baseIRI ?? '');\n      return new E.NamedNode(iri);\n    })\n    .collect(),\n};\n\n// See special functions\n// const BNODE = {};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strdt\n */\nconst STRDT = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRDT).set(\n    [ TypeURL.XSD_STRING, 'namedNode' ],\n    ({ superTypeProvider }) => ([ str, iri ]: [E.StringLiteral, E.NamedNode]) => {\n      const lit = DF.literal(str.typedValue, DF.namedNode(iri.value));\n      return new TermTransformer(superTypeProvider).transformLiteral(lit);\n    },\n  ).collect(),\n};\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strlang\n */\nconst STRLANG = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRLANG)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (val: string, language: string) => new E.LangStringLiteral(val, language.toLowerCase()),\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-uuid\n */\nconst UUID = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.UUID)\n    .set([], () => () => new E.NamedNode(`urn:uuid:${uuid.v4()}`))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-struuid\n */\nconst STRUUID = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.STRUUID)\n    .set([], () => () => string(uuid.v4()))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on strings\n// https://www.w3.org/TR/sparql11-query/#func-forms\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strlen\n */\nconst STRLEN = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.STRLEN)\n    .onStringly1(() => str => integer([ ...str.typedValue ].length))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-substr\n */\nconst SUBSTR = {\n  arity: [ 2, 3 ],\n  overloads: declare(C.RegularOperator.SUBSTR)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_INTEGER ],\n      () => (source: string, startingLoc: number) => string([ ...source ].slice(startingLoc - 1).join('')),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_INTEGER ],\n      () => (source: E.LangStringLiteral, startingLoc: E.NumericLiteral) => {\n        const sub = [ ...source.typedValue ].slice(startingLoc.typedValue - 1).join('');\n        return langString(sub, source.language);\n      },\n    )\n    .onTernaryTyped([\n      TypeURL.XSD_STRING,\n      TypeURL.XSD_INTEGER,\n      TypeURL.XSD_INTEGER,\n    ], () => (source: string, startingLoc: number, length: number) =>\n      string([ ...source ].slice(startingLoc - 1, length + startingLoc - 1).join('')))\n    .onTernary([\n      TypeURL.RDF_LANG_STRING,\n      TypeURL.XSD_INTEGER,\n      TypeURL.XSD_INTEGER,\n    ], () => (source: E.LangStringLiteral, startingLoc: E.NumericLiteral, length: E.NumericLiteral) => {\n      const sub = [ ...source.typedValue ]\n        .slice(startingLoc.typedValue - 1, length.typedValue + startingLoc.typedValue - 1).join('');\n      return langString(sub, source.language);\n    })\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-ucase\n */\nconst UCASE = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.UCASE)\n    .onString1Typed(() => lit => string(lit.toUpperCase()))\n    .onLangString1(() => lit => langString(lit.typedValue.toUpperCase(), lit.language))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-lcase\n */\nconst LCASE = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.LCASE)\n    .onString1Typed(() => lit => string(lit.toLowerCase()))\n    .onLangString1(() => lit => langString(lit.typedValue.toLowerCase(), lit.language))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strstarts\n * for this and the following functions you'll see (string, langstring) is not allowed. This behaviour is defined in:\n * https://www.w3.org/TR/sparql11-query/#func-arg-compatibility\n */\nconst STRSTARTS = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRSTARTS)\n    .onBinaryTyped(\n      [ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => bool(arg1.startsWith(arg2)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        return bool(arg1.typedValue.startsWith(arg2.typedValue));\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strends\n */\nconst STRENDS = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRENDS)\n    .onBinaryTyped(\n      [ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => bool(arg1.endsWith(arg2)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        return bool(arg1.typedValue.endsWith(arg2.typedValue));\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-contains\n */\nconst CONTAINS = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.CONTAINS)\n    .onBinaryTyped(\n      [ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => bool(arg1.includes(arg2)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        return bool(arg1.typedValue.includes(arg2.typedValue));\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strbefore\n */\nconst STRBEFORE = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRBEFORE)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => string(arg1.slice(0, Math.max(0, arg1.indexOf(arg2)))),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.StringLiteral) => {\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strafter\n */\nconst STRAFTER = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRAFTER)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => string(arg1.slice(arg1.indexOf(arg2)).slice(arg2.length)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.StringLiteral) => {\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-encode\n */\nconst ENCODE_FOR_URI = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.ENCODE_FOR_URI)\n    .onStringly1Typed(() => val => string(encodeURI(val))).collect(),\n};\n\n// See special operators\n// const CONCAT = {}\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-langMatches\n */\nconst langmatches = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.LANG_MATCHES)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (tag: string, range: string) => bool(X.langMatches(tag, range)),\n    ).collect(),\n};\n\nfunction regex2(): (text: string, pattern: string) => E.BooleanLiteral {\n  return (text: string, pattern: string) => bool(X.matches(text, pattern));\n}\nfunction regex3(): (text: string, pattern: string, flags: string) => E.BooleanLiteral {\n  return (text: string, pattern: string, flags: string) => bool(X.matches(text, pattern, flags));\n}\n/**\n * https://www.w3.org/TR/sparql11-query/#func-regex\n */\nconst REGEX = {\n  arity: [ 2, 3 ],\n  overloads: declare(C.RegularOperator.REGEX)\n    .onBinaryTyped([ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ], regex2)\n    .onTernaryTyped([ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING, TypeURL.XSD_STRING ], regex3)\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-replace\n */\nconst REPLACE = {\n  arity: [ 3, 4 ],\n  overloads: declare(C.RegularOperator.REPLACE)\n    .onTernaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg: string, pattern: string, replacement: string) =>\n        string(X.replace(arg, pattern, replacement)),\n    )\n    .set(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => ([ arg, pattern, replacement ]: [E.LangStringLiteral, E.StringLiteral, E.StringLiteral]) => {\n        const result = X.replace(arg.typedValue, pattern.typedValue, replacement.typedValue);\n        return langString(result, arg.language);\n      },\n    )\n    .onQuaternaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg: string, pattern: string, replacement: string, flags: string) =>\n        string(X.replace(arg, pattern, replacement, flags)),\n    )\n    .set(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => ([ arg, pattern, replacement, flags ]:\n      [E.LangStringLiteral, E.StringLiteral, E.StringLiteral, E.StringLiteral]) => {\n        const result = X.replace(arg.typedValue, pattern.typedValue, replacement.typedValue, flags.typedValue);\n        return langString(result, arg.language);\n      },\n    )\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on numerics\n// https://www.w3.org/TR/sparql11-query/#func-numerics\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-abs\n */\nconst abs = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.ABS)\n    .numericConverter(() => num => Math.abs(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-round\n */\nconst round = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.ROUND)\n    .numericConverter(() => num => Math.round(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-ceil\n */\nconst ceil = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.CEIL)\n    .numericConverter(() => num => Math.ceil(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-floor\n */\nconst floor = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.FLOOR)\n    .numericConverter(() => num => Math.floor(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#idp2130040\n */\nconst rand = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.RAND)\n    .set([], () => () => double(Math.random()))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on Dates and Times\n// https://www.w3.org/TR/sparql11-query/#func-date-time\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-now\n */\nconst now = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.NOW).set([], (sharedContext: ICompleteSharedContext) => () =>\n    new E.DateTimeLiteral(toDateTimeRepresentation(\n      { date: sharedContext.now, timeZone: sharedContext.defaultTimeZone },\n    ))).collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-year\n */\nconst year = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.YEAR)\n    .onDateTime1(\n      () => date => integer(date.typedValue.year),\n    )\n    .set([ TypeURL.XSD_DATE ], () => ([ date ]: [E.DateLiteral ]) => integer(date.typedValue.year))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-month\n */\nconst month = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.MONTH)\n    .onDateTime1(\n      () => date => integer(date.typedValue.month),\n    )\n    .set([ TypeURL.XSD_DATE ], () => ([ date ]: [ E.DateLiteral]) => integer(date.typedValue.month))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-day\n */\nconst day = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.DAY)\n    .onDateTime1(\n      () => date => integer(date.typedValue.day),\n    )\n    .set([ TypeURL.XSD_DATE ], () => ([ date ]: [ E.DateLiteral]) => integer(date.typedValue.day))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-hours\n */\nconst hours = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.HOURS)\n    .onDateTime1(\n      () => date => integer(date.typedValue.hours),\n    )\n    .set([ TypeURL.XSD_TIME ], () => ([ time ]: [ E.TimeLiteral]) => integer(time.typedValue.hours))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-minutes\n */\nconst minutes = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.MINUTES)\n    .onDateTime1(() => date => integer(date.typedValue.minutes))\n    .set([ TypeURL.XSD_TIME ], () => ([ time ]: [ E.TimeLiteral]) => integer(time.typedValue.minutes))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-seconds\n */\nconst seconds = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SECONDS)\n    .onDateTime1(() => date => decimal(date.typedValue.seconds))\n    .set([ TypeURL.XSD_TIME ], () => ([ time ]: [ E.TimeLiteral]) => integer(time.typedValue.seconds))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-timezone\n */\nconst timezone = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.TIMEZONE)\n    .onDateTime1(\n      () => (date) => {\n        const duration: Partial<IDayTimeDurationRepresentation> = {\n          hours: date.typedValue.zoneHours,\n          minutes: date.typedValue.zoneMinutes,\n        };\n        if (duration.hours === undefined && duration.minutes === undefined) {\n          throw new Err.InvalidTimezoneCall(date.str());\n        }\n        return new E.DayTimeDurationLiteral(duration);\n      },\n    )\n    .copy({ from: [ TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_DATE ]})\n    .copy({ from: [ TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_TIME ]})\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-tz\n */\nconst tz = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.TZ)\n    .onDateTime1(\n      () => date => string(extractRawTimeZone(date.str())),\n    )\n    .copy({ from: [ TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_DATE ]})\n    .copy({ from: [ TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_TIME ]})\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Hash functions\n// https://www.w3.org/TR/sparql11-query/#func-hash\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-md5\n */\nconst MD5 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.MD5)\n    .onString1Typed(() => str => string(md5(str)))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha1\n */\nconst SHA1 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA1)\n    .onString1Typed(() => str => string(sha1().update(str).digest('hex')))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha256\n */\nconst SHA256 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA256)\n    .onString1Typed(() => str => string(sha256().update(str).digest('hex')))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha384\n */\nconst SHA384 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA384)\n    .onString1Typed(() => str => string(sha384().update(str).digest('hex')))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha512\n */\nconst SHA512 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA512)\n    .onString1Typed(() => str => string(sha512().update(str).digest('hex')))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions for quoted triples\n// https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#triple-function\n// ----------------------------------------------------------------------------\n\n/**\n * https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#triple-function\n */\nconst triple = {\n  arity: 3,\n  overloads: declare(C.RegularOperator.TRIPLE)\n    .onTerm3(\n      context => (...args) => new E.Quad(\n        DF.quad(args[0].toRDF(), args[1].toRDF(), args[2].toRDF()),\n        context.superTypeProvider,\n      ),\n    )\n    .collect(),\n};\n\n/**\n * https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#subject\n */\nconst subject = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SUBJECT)\n    .onQuad1(() => quad => quad.subject)\n    .collect(),\n};\n\n/**\n * https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#predicate\n */\nconst predicate = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.PREDICATE)\n    .onQuad1(() => quad => quad.predicate)\n    .collect(),\n};\n\n/**\n * https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#object\n */\nconst object = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.OBJECT)\n    .onQuad1(() => quad => quad.object)\n    .collect(),\n};\n\n/**\n * https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#istriple\n */\nconst istriple = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_TRIPLE)\n    .onTerm1(() => term => bool(term.termType === 'quad'))\n    .collect(),\n};\n\n// End definitions.\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n\n/**\n * Collect all the definitions from above into an object\n */\nexport const definitions: Record<C.RegularOperator, IOverloadedDefinition> = {\n  // --------------------------------------------------------------------------\n  // Operator Mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  // --------------------------------------------------------------------------\n  '!': not,\n  uplus: unaryPlus,\n  uminus: unaryMinus,\n  '*': multiplication,\n  '/': division,\n  '+': addition,\n  '-': subtraction,\n  '=': equality,\n  '!=': inequality,\n  '<': lesserThan,\n  '>': greaterThan,\n  '<=': lesserThanEqual,\n  '>=': greaterThanEqual,\n\n  // --------------------------------------------------------------------------\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n  // --------------------------------------------------------------------------\n  isiri: isIRI,\n  isuri: isIRI,\n  isblank: isBlank,\n  isliteral: isLiteral,\n  isnumeric: isNumeric,\n  str: STR,\n  lang,\n  datatype,\n  iri: IRI,\n  uri: IRI,\n  // 'BNODE': BNODE (see special operators),\n  strdt: STRDT,\n  strlang: STRLANG,\n  uuid: UUID,\n  struuid: STRUUID,\n\n  // --------------------------------------------------------------------------\n  // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // --------------------------------------------------------------------------\n  strlen: STRLEN,\n  substr: SUBSTR,\n  ucase: UCASE,\n  lcase: LCASE,\n  strstarts: STRSTARTS,\n  strends: STRENDS,\n  contains: CONTAINS,\n  strbefore: STRBEFORE,\n  strafter: STRAFTER,\n  encode_for_uri: ENCODE_FOR_URI,\n  // 'concat': CONCAT (see special operators)\n  langmatches,\n  regex: REGEX,\n  replace: REPLACE,\n\n  // --------------------------------------------------------------------------\n  // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n  // --------------------------------------------------------------------------\n  abs,\n  round,\n  ceil,\n  floor,\n  rand,\n\n  // --------------------------------------------------------------------------\n  // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  // --------------------------------------------------------------------------\n  now,\n  year,\n  month,\n  day,\n  hours,\n  minutes,\n  seconds,\n  timezone,\n  tz,\n\n  // --------------------------------------------------------------------------\n  // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n  // --------------------------------------------------------------------------\n  md5: MD5,\n  sha1: SHA1,\n  sha256: SHA256,\n  sha384: SHA384,\n  sha512: SHA512,\n\n  // --------------------------------------------------------------------------\n  // Functions for quoted triples\n  // https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#triple-function\n  // --------------------------------------------------------------------------\n  triple,\n  subject,\n  predicate,\n  object,\n  istriple,\n};\n"]}