{"version":3,"file":"NamedFunctions.js","sourceRoot":"","sources":["NamedFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DateLiteral, DateTimeLiteral, TimeLiteral } from '../expressions';\nimport * as E from '../expressions';\nimport { DurationLiteral } from '../expressions';\nimport type * as C from '../util/Consts';\nimport { TypeURL } from '../util/Consts';\nimport { trimToDayTimeDuration, trimToYearMonthDuration } from '../util/DateTimeHelpers';\nimport * as Err from '../util/Errors';\nimport {\n  parseDate,\n  parseDateTime,\n  parseDayTimeDuration,\n  parseDuration,\n  parseTime,\n  parseYearMonthDuration,\n  parseXSDDecimal,\n  parseXSDFloat,\n  parseXSDInteger,\n} from '../util/Parsing';\n\nimport type { IOverloadedDefinition } from './Core';\nimport { bool, dateTime, decimal, declare, double, float, integer, string } from './Helpers';\n\ntype Term = E.TermExpression;\n\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Begin definitions.\n\n// ----------------------------------------------------------------------------\n// XPath Constructor functions\n// https://www.w3.org/TR/sparql11-query/#\n// https://www.w3.org/TR/xpath-functions/#casting-from-primitive-to-primitive\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/xpath-functions/#casting-to-string\n */\nconst xsdToString = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_STRING)\n    .onNumeric1(() => (val: E.NumericLiteral) => string(float(val.typedValue).str()))\n    .onBoolean1Typed(() => val => string(bool(val).str()))\n    .onTerm1(() => (val: E.StringLiteral) => string(val.str()))\n    .collect(),\n};\n\nconst xsdToFloat = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_FLOAT)\n    .onNumeric1(() => (val: E.NumericLiteral) => float(val.typedValue))\n    .onBoolean1Typed(() => val => float(val ? 1 : 0))\n    .onUnary(TypeURL.XSD_STRING, () => (val: E.StringLiteral) => {\n      const result = parseXSDFloat(val.str());\n      if (result === undefined) {\n        throw new Err.CastError(val, TypeURL.XSD_FLOAT);\n      }\n      return float(result);\n    }, false)\n    .collect(),\n};\n\nconst xsdToDouble = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_DOUBLE)\n    .onNumeric1(() => (val: E.NumericLiteral) => double(val.typedValue))\n    .onBoolean1Typed(() => val => double(val ? 1 : 0))\n    .onUnary(TypeURL.XSD_STRING, () => (val: E.Term) => {\n      const result = parseXSDFloat(val.str());\n      if (result === undefined) {\n        throw new Err.CastError(val, TypeURL.XSD_DOUBLE);\n      }\n      return double(result);\n    }, false)\n    .collect(),\n};\n\nconst xsdToDecimal = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_DECIMAL)\n    .onNumeric1(() => (val: E.Term) => {\n      const result = parseXSDDecimal(val.str());\n      if (result === undefined) {\n        throw new Err.CastError(val, TypeURL.XSD_DECIMAL);\n      }\n      return decimal(result);\n    })\n    .onString1(() => (val: E.Term) => {\n      const str = val.str();\n      const result = /^([+-])?(\\d+(\\.\\d+)?)$/u.test(str) ? parseXSDDecimal(str) : undefined;\n      if (result === undefined) {\n        throw new Err.CastError(val, TypeURL.XSD_DECIMAL);\n      }\n      return decimal(result);\n    }, false)\n    .onBoolean1Typed(() => val => decimal(val ? 1 : 0))\n    .collect(),\n};\n\nconst xsdToInteger = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_INTEGER)\n    .onBoolean1Typed(() => val => integer(val ? 1 : 0))\n    .onNumeric1(() => (val: E.Term) => {\n      const result = parseXSDInteger(val.str());\n      if (result === undefined) {\n        throw new Err.CastError(val, TypeURL.XSD_INTEGER);\n      }\n      return integer(result);\n    }, false)\n    .onString1(() => (val: E.Term) => {\n      const str = val.str();\n      const result = /^\\d+$/u.test(str) ? parseXSDInteger(str) : undefined;\n      if (result === undefined) {\n        throw new Err.CastError(val, TypeURL.XSD_INTEGER);\n      }\n      return integer(result);\n    })\n    .collect(),\n};\n\nconst xsdToDatetime = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_DATE_TIME)\n    .onUnary(TypeURL.XSD_DATE_TIME, () => (val: E.DateTimeLiteral) => val)\n    .onUnary(TypeURL.XSD_STRING, () => (val: Term) =>\n      dateTime(parseDateTime(val.str()), val.str()), false)\n    .onUnary(TypeURL.XSD_DATE, () => (val: E.DateLiteral) =>\n      new E.DateTimeLiteral({ ...val.typedValue, hours: 0, minutes: 0, seconds: 0 }))\n    .collect(),\n};\n\nconst xsdToBoolean = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_BOOLEAN)\n    .onNumeric1(() => (val: E.NumericLiteral) => bool(val.coerceEBV()), true)\n    .onUnary(TypeURL.XSD_BOOLEAN, () => (val: Term) => bool(val.coerceEBV()), true)\n    .onUnary(TypeURL.XSD_STRING, () => (val: Term) => {\n      switch (val.str()) {\n        case 'true':\n          return bool(true);\n        case 'false':\n          return bool(false);\n        case '1':\n          return bool(true);\n        case '0':\n          return bool(false);\n        default:\n          throw new Err.CastError(val, TypeURL.XSD_BOOLEAN);\n      }\n    }, false)\n    .collect(),\n};\n\n// End definitions.\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n\n// Additional definitions to implement https://github.com/w3c/sparql-12/blob/main/SEP/SEP-0002/sep-0002.md\n// The additional casts are listed in https://www.w3.org/TR/xpath-functions/#casting-from-primitive-to-primitive\nconst xsdToTime = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_TIME)\n    .onUnary(TypeURL.XSD_TIME, () => (val: TimeLiteral) => new E.TimeLiteral(val.typedValue, val.strValue))\n    .onUnary(TypeURL.XSD_DATE_TIME, () => (val: DateTimeLiteral) =>\n      new E.TimeLiteral(val.typedValue))\n    .onStringly1(() => (val: Term) => new E.TimeLiteral(parseTime(val.str())))\n    .collect(),\n};\n\nconst xsdToDate = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_DATE)\n    .onUnary(TypeURL.XSD_DATE, () => (val: DateLiteral) => new E.DateLiteral(val.typedValue, val.strValue))\n    .onUnary(TypeURL.XSD_DATE_TIME, () => (val: DateTimeLiteral) =>\n      new E.DateLiteral(val.typedValue))\n    .onStringly1(() => (val: E.Term) => new E.DateLiteral(parseDate(val.str())))\n    .collect(),\n};\n\nconst xsdToDuration = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_DURATION)\n    // https://www.w3.org/TR/xpath-functions/#casting-to-durations\n    .onUnary(TypeURL.XSD_DURATION, () => (val: E.DurationLiteral) =>\n      // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype\n      new E.DurationLiteral(val.typedValue, val.strValue))\n    .onStringly1(() => (val: Term) =>\n      new DurationLiteral(parseDuration(val.str())))\n    .collect(),\n};\n\nconst xsdToDayTimeDuration = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_DAY_TIME_DURATION)\n    // https://www.w3.org/TR/xpath-functions/#casting-to-durations\n    .onUnary(TypeURL.XSD_DURATION, () => (val: E.DurationLiteral) =>\n      // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype\n      new E.DayTimeDurationLiteral(trimToDayTimeDuration(val.typedValue)))\n    .onStringly1(() => (val: Term) =>\n      new E.DayTimeDurationLiteral(parseDayTimeDuration(val.str())))\n    .collect(),\n};\n\nconst xsdToYearMonthDuration = {\n  arity: 1,\n  overloads: declare(TypeURL.XSD_YEAR_MONTH_DURATION)\n    // https://www.w3.org/TR/xpath-functions/#casting-to-durations\n    .onUnary(TypeURL.XSD_DURATION, () => (val: E.DurationLiteral) =>\n      // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype\n      new E.YearMonthDurationLiteral(trimToYearMonthDuration(val.typedValue)))\n    .onStringly1(() => (val: Term) =>\n      new E.YearMonthDurationLiteral(parseYearMonthDuration(val.str())))\n    .collect(),\n};\n\nexport const namedDefinitions: Record<C.NamedOperator, IOverloadedDefinition> = {\n  // --------------------------------------------------------------------------\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // --------------------------------------------------------------------------\n  [TypeURL.XSD_STRING]: xsdToString,\n  [TypeURL.XSD_FLOAT]: xsdToFloat,\n  [TypeURL.XSD_DOUBLE]: xsdToDouble,\n  [TypeURL.XSD_DECIMAL]: xsdToDecimal,\n  [TypeURL.XSD_INTEGER]: xsdToInteger,\n  [TypeURL.XSD_DATE_TIME]: xsdToDatetime,\n  [TypeURL.XSD_DATE]: xsdToDate,\n  [TypeURL.XSD_BOOLEAN]: xsdToBoolean,\n  [TypeURL.XSD_TIME]: xsdToTime,\n  [TypeURL.XSD_DURATION]: xsdToDuration,\n  [TypeURL.XSD_DAY_TIME_DURATION]: xsdToDayTimeDuration,\n  [TypeURL.XSD_YEAR_MONTH_DURATION]: xsdToYearMonthDuration,\n};\n"]}