{"version":3,"file":"Aliases.js","sourceRoot":"","sources":["Aliases.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { stringToTerm } from 'rdf-string';\n\n/**\n * Maps short strings to longer RDF term-literals for easy use in making test tables.\n * Ex: { 'true': '\"true\"^^xsd:boolean' }\n */\nexport type AliasMap = Record<string, string>;\n\nexport function merge(...maps: AliasMap[]): AliasMap {\n  return Object.assign({}, ...maps);\n}\n\n/**\n * A list of default prefixes that are used by stringToTermPrefix and template\n */\nexport const defaultPrefixes: Record<string, string> = {\n  xsd: 'http://www.w3.org/2001/XMLSchema#',\n  rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString',\n  fn: 'https://www.w3.org/TR/xpath-functions#',\n  er: 'http://www.w3.org/2005/xqt-errors#',\n  example: 'https://example.org/',\n};\n\n/**\n * Converts a string to a rdf term. The string can contain a prefix that'll be\n * resolved with defaultPrefixes of the provided prefixes.\n * @param str\n * @param additionalPrefixes\n */\nexport function stringToTermPrefix(str: string, additionalPrefixes?: Record<string, string>): RDF.Term {\n  const term = <RDF.Literal> stringToTerm(str);\n  if (term.termType !== 'Literal') {\n    return term;\n  }\n  if (!term.datatype) {\n    return term;\n  }\n\n  const url = term.datatype.value;\n  try {\n    const matched = url.match(/.*:/ug);\n    const prefix = matched ? matched[0].slice(0, -1) : '';\n    const prefixes: Record<string, string> = additionalPrefixes ?\n        { ...defaultPrefixes, ...additionalPrefixes } :\n      defaultPrefixes;\n    if (prefixes[prefix]) {\n      term.datatype.value = url.replace(`${prefix}:`, prefixes[prefix]);\n    }\n    return term;\n  } catch {\n    return term;\n  }\n}\n\nexport function template(expr: string, additionalPrefixes?: Record<string, string>) {\n  const prefixRecord = additionalPrefixes ? { ...defaultPrefixes, ...additionalPrefixes } : defaultPrefixes;\n  const prefix = Object.entries(prefixRecord).map(([ pref, full ]) =>\n    `PREFIX ${pref.endsWith(':') ? pref : `${pref}:`} <${full}>`).join('\\n');\n  return `\n${prefix}\n\nSELECT * WHERE { ?s ?p ?o FILTER (${expr})}\n`;\n}\n\n/**\n * Transform an int to rdf int:\n * '2' => \"2\"^^xsd:integer\n * @param value string (representing an int)\n */\nexport function int(value: string): string {\n  return compactTermString(value, 'xsd:integer');\n}\n\n/**\n * '2.0' => \"2.0\"^^${dataType}\n * @param value string (representing a decimal)\n */\nexport function decimal(value: string): string {\n  return compactTermString(value, 'xsd:decimal');\n}\n\n/**\n * '123.456' => \"123.456\"^^xsd:double\n * @param value string (representing a decimal)\n */\nexport function double(value: string): string {\n  return compactTermString(value, 'xsd:double');\n}\n\n/**\n * '2001-10-26T21:32:52' => \"2001-10-26T21:32:52\"^^xsd:dateTime\n * @param value string (representing a date)\n */\nexport function dateTimeTyped(value: string): string {\n  return compactTermString(value, 'xsd:dateTime');\n}\n\n/**\n * ''02:12:59'' => \"'02:12:59'\"^^xsd:time\n * @param value string (representing a date)\n */\nexport function timeTyped(value: string): string {\n  return compactTermString(value, 'xsd:time');\n}\n\n/**\n * ''2010-06-21'' => \"'2010-06-21'\"^^xsd:date\n * @param value string (representing a date)\n */\nexport function dateTyped(value: string): string {\n  return compactTermString(value, 'xsd:date');\n}\n\n/**\n * 'P1Y' => \"P1Y\"^^xsd:duration\n * @param value string (representing a duration)\n */\nexport function durationTyped(value: string): string {\n  return compactTermString(value, 'xsd:duration');\n}\n\n/**\n * '-PT10H' => \"-PT10H\"^^xsd:dateTime\n * @param value string (representing a dayTimeDuration)\n */\nexport function dayTimeDurationTyped(value: string): string {\n  return compactTermString(value, 'xsd:dayTimeDuration');\n}\n\n/**\n * 'P1Y' => \"P1Y\"^^xsd:yearMonthDuration\n * @param value string (representing a yearMonthDuration)\n */\nexport function yearMonthDurationTyped(value: string): string {\n  return compactTermString(value, 'xsd:yearMonthDuration');\n}\n\nexport function compactTermString(value: string, dataType: string): string {\n  return `\"${value}\"^^${dataType}`;\n}\n\nexport const bool: AliasMap = {\n  true: '\"true\"^^xsd:boolean',\n  false: '\"false\"^^xsd:boolean',\n  anyBool: '\"true\"^^xsd:boolean',\n};\n\nexport const error: AliasMap = {\n  invalidDateTime: '\"not a dateTime\"^^xsd:dateTime',\n  invalidBool: '\"not a boolean\"^^xsd:boolean',\n  invalidInt: '\"not an integer\"^^xsd:integer',\n  invalidShort: '\"not a short\"^^xsd:short',\n};\n\nexport const numeric: AliasMap = {\n  anyNum: '\"14\"^^xsd:integer',\n  '0i': '\"0\"^^xsd:integer',\n  '1i': '\"1\"^^xsd:integer',\n  '2i': '\"2\"^^xsd:integer',\n  '3i': '\"3\"^^xsd:integer',\n  '4i': '\"4\"^^xsd:integer',\n  '6i': '\"6\"^^xsd:integer',\n  '-6i': '\"-6\"^^xsd:integer',\n  '12i': '\"12\"^^xsd:integer',\n  '-5i': '\"-5\"^^xsd:integer',\n\n  '0f': '\"0\"^^xsd:float',\n  '1f': '\"1\"^^xsd:float',\n  '2f': '\"2\"^^xsd:float',\n  '3f': '\"3\"^^xsd:float',\n  '4f': '\"4\"^^xsd:float',\n  '6f': '\"6\"^^xsd:float',\n  '12f': '\"12\"^^xsd:float',\n  '-0f': '\"-0\"^^xsd:float',\n  '-1f': '\"-1\"^^xsd:float',\n  '-2f': '\"-2\"^^xsd:float',\n  '-3f': '\"-3\"^^xsd:float',\n  '-4f': '\"-4\"^^xsd:float',\n  '-5f': '\"-5\"^^xsd:float',\n  '-6f': '\"-6\"^^xsd:float',\n  '-12f': '\"-12\"^^xsd:float',\n  NaN: '\"NaN\"^^xsd:float',\n  INF: '\"INF\"^^xsd:float',\n  NaNd: '\"NaN\"^^xsd:double',\n  '-INF': '\"-INF\"^^xsd:float',\n\n  '0d': '\"0\"^^xsd:decimal',\n  '1d': '\"1\"^^xsd:decimal',\n  '2d': '\"2\"^^xsd:decimal',\n  '3d': '\"3\"^^xsd:decimal',\n  '-5d': '\"-5\"^^xsd:decimal',\n};\n\nexport const dateTime: AliasMap = {\n  anyDate: '\"2001-10-26T21:32:52\"^^xsd:dateTime',\n  earlyN: '\"1999-03-17T06:00:00Z\"^^xsd:dateTime',\n  earlyZ: '\"1999-03-17T10:00:00+04:00\"^^xsd:dateTime',\n  lateN: '\"2002-04-02T17:00:00Z\"^^xsd:dateTime',\n  lateZ: '\"2002-04-02T16:00:00-01:00\"^^xsd:dateTime',\n  edge1: '\"1999-12-31T24:00:00\"^^xsd:dateTime',\n  edge2: '\"2000-01-01T00:00:00\"^^xsd:dateTime',\n};\n\nexport const str: AliasMap = {\n  anyStr: '\"generic-string\"^^xsd:string',\n  empty: '\"\"^^xsd:string',\n  aaa: '\"aaa\"^^xsd:string',\n  bbb: '\"bbb\"^^xsd:string',\n};\n"]}